@model HAIRCRAFT.Models.RegisterViewModel

@{
    ViewData["Title"] = "Rejestracja";
}

<style>
    /* Styl dla nagłówka */
    h2 {
        font-size: 2rem; /* Powiększenie czcionki nagłówka */
        color: #007bff; /* Kolor nagłówka */
    }

    /* Styl dla kontenera rejestracji */
    .registration-container {
        background-color: rgba(255, 255, 255, 0.9); /* Lekko biały kolor tła */
        border-radius: 10px; /* Zaokrąglenie rogów */
        padding: 2rem; /* Odstęp wewnętrzny */
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* Cień */
    }

    /* Styl dla komunikatów błędów */
    .alert {
        margin-bottom: 1rem; /* Odstęp poniżej komunikatu błędu */
    }

    /* Styl przycisku */
    .btn-primary {
        transition: transform 0.2s ease; /* Dodanie efektu powiększania */
    }

    .btn-primary:hover {
        transform: scale(1.05); /* Powiększenie przycisku na hover */
    }

    /* Styl dla przycisku powrotu */
    .btn-secondary {
        margin-top: 1rem; /* Odstęp nad przyciskiem powrotu */
    }
</style>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 registration-container">
            <h2 class="text-center mb-4">Rejestracja</h2>

            @* Komunikaty o błędach *@
            @if (!String.IsNullOrEmpty(ViewBag.RegisterError))
            {
                <div class="alert alert-danger">
                    @ViewBag.RegisterError
                </div>
            }

            <form asp-action="Register" method="post" novalidate>
                @* Walidacja błędów dla pełnego imienia *@
                <div class="mb-3">
                    <label asp-for="FullName" class="form-label">Pełne imię</label>
                    <input asp-for="FullName" class="form-control @(ViewData.ModelState.ContainsKey("FullName") && ViewData.ModelState["FullName"]?.Errors?.Count > 0 ? "is-invalid" : "")" required />
                    <div class="invalid-feedback">
                        @if (ViewData.ModelState.ContainsKey("FullName") && ViewData.ModelState["FullName"]?.Errors?.Count > 0)
                        {
                            @ViewData.ModelState["FullName"]?.Errors?[0]?.ErrorMessage
                        }
                    </div>
                </div>

                @* Walidacja błędów dla email *@
                <div class="mb-3">
                    <label asp-for="Email" class="form-label">Email</label>
                    <input asp-for="Email" type="email" class="form-control @(ViewData.ModelState.ContainsKey("Email") && ViewData.ModelState["Email"]?.Errors?.Count > 0 ? "is-invalid" : "")" required />
                    <div class="invalid-feedback">
                        @if (ViewData.ModelState.ContainsKey("Email") && ViewData.ModelState["Email"]?.Errors?.Count > 0)
                        {
                            @ViewData.ModelState["Email"]?.Errors?[0]?.ErrorMessage
                        }
                    </div>
                </div>

                @* Walidacja błędów dla hasła *@
                <div class="mb-3">
                    <label asp-for="Password" class="form-label">Hasło</label>
                    <input asp-for="Password" type="password" class="form-control @(ViewData.ModelState.ContainsKey("Password") && ViewData.ModelState["Password"]?.Errors?.Count > 0 ? "is-invalid" : "")" required />
                    <div class="invalid-feedback">
                        @if (ViewData.ModelState.ContainsKey("Password") && ViewData.ModelState["Password"]?.Errors?.Count > 0)
                        {
                            @ViewData.ModelState["Password"]?.Errors?[0]?.ErrorMessage
                        }
                    </div>
                </div>

                @* Walidacja błędów dla potwierdzenia hasła *@
                <div class="mb-3">
                    <label asp-for="ConfirmPassword" class="form-label">Potwierdź hasło</label>
                    <input asp-for="ConfirmPassword" type="password" class="form-control @(ViewData.ModelState.ContainsKey("ConfirmPassword") && ViewData.ModelState["ConfirmPassword"]?.Errors?.Count > 0 ? "is-invalid" : "")" required />
                    <div class="invalid-feedback">
                        @if (ViewData.ModelState.ContainsKey("ConfirmPassword") && ViewData.ModelState["ConfirmPassword"]?.Errors?.Count > 0)
                        {
                            @ViewData.ModelState["ConfirmPassword"]?.Errors?[0]?.ErrorMessage
                        }
                    </div>
                </div>

                @* Typ użytkownika (rola) *@
                <div class="mb-3">
                    <label asp-for="Role" class="form-label">Typ użytkownika</label>
                    <select asp-for="Role" class="form-select">
                        <option value="Klient">Klient</option>
                        <option value="Fryzjer">Fryzjer</option>
                    </select>
                </div>

                <button type="submit" class="btn btn-primary w-100">Zarejestruj się</button>
            </form>
        </div>
    </div>

    <!-- Przycisk powrotu do indexu -->
    <div class="text-center mt-4">
        <a asp-controller="Home" asp-action="Index" class="btn btn-secondary btn-lg">
            <i class="fas fa-arrow-left"></i> Wróć
        </a>
    </div>
</div>
