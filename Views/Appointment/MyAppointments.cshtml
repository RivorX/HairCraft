@model IEnumerable<HAIRCRAFT.Models.Appointment>

<div id="csrfToken" style="display: none;">
    @Html.AntiForgeryToken()
</div>

@{
    var token = @Html.AntiForgeryToken().ToString(); // Pobranie tokenu CSRF z formularza
}

<style>
    /* Styl dla nagłówka sekcji */
    h2 {
        margin-bottom: 2rem;
        color: #007bff;
        font-weight: bold;
        font-size: 1.8rem;
    }

    .table {
        margin-top: 1rem;
        border-collapse: collapse;
        width: 100%;
    }

        .table th, .table td {
            padding: 1rem;
            text-align: left;
            vertical-align: middle;
        }

        .table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #495057;
            border-bottom: 2px solid #dee2e6;
        }

        .table tbody tr:hover {
            background-color: #f1f1f1;
        }

        .table td p {
            margin-bottom: 0;
            color: #6c757d;
        }

    .star-rating {
        display: flex;
        gap: 5px;
        justify-content: center;
    }

    .star {
        cursor: pointer;
        font-size: 1.5rem;
        color: #ccc;
        transition: color 0.2s;
    }

        .star.selected {
            color: #f39c12;
        }

    .btn-danger {
        background-color: #dc3545;
        border: none;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        transition: background-color 0.3s;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-secondary {
        margin-top: 1.5rem;
        padding: 0.5rem 1rem;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 0.25rem;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .content-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }
</style>

<div class="container py-5 content-container">
    <h2 class="text-center">Twoje zarezerwowane wizyty</h2>

    @if (!Model.Any())
    {
        <p class="text-center text-muted">Brak rezerwacji.</p>
    }
    else
    {
        var sortedAppointments = Model.OrderBy(a => a.AppointmentDate >= DateTime.Now ? 0 : 1)
        .ThenBy(a => a.AppointmentDate).ToList();

        <table class="table table-bordered mt-2">
            <thead>
                <tr>
                    <th>Salon</th>
                    <th>Usługa</th>
                    <th>Data</th>
                    <th>Ocena</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var appointment in sortedAppointments)
                {
                    var totalRatings = appointment.Salon.Appointments.Count(a => a.Rating.HasValue);
                    var averageRating = totalRatings > 0 ? appointment.Salon.Appointments.Where(a => a.Rating.HasValue).Average(a => a.Rating.Value) : 0;

                    <tr>
                        <td>@appointment.Salon.Name
                            @if (totalRatings > 0)
                            {
                                <span>(@totalRatings ocen, Średnia: @averageRating.ToString("0.0") &#9733;)</span>
                            }
                            else
                            {
                                <span>(Brak ocen)</span>
                            }
                        </td>
                        <td>@appointment.Service</td>
                        <td>@appointment.AppointmentDate.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>
                            @if (appointment.AppointmentDate < DateTime.Now)
                            {
                                <!-- System oceniania wizyty -->
                                <div class="star-rating" data-appointment-id="@appointment.Id">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(appointment.Rating >= i ? "selected" : "")" data-value="@i">&#9733;</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Brak oceny</p>
                            }
                        </td>
                        <td>
                            @if (appointment.AppointmentDate > DateTime.Now)
                            {
                                <!-- Formularz do odwołania wizyty -->
                                <form asp-action="CancelAppointment" method="post">
                                    @Html.AntiForgeryToken() <!-- Dodanie tokenu CSRF -->
                                    <input type="hidden" name="id" value="@appointment.Id" />
                                    <button type="submit" class="btn btn-danger">Odwołaj</button>
                                </form>
                            }
                            else
                            {
                                <p class="text-muted">Niedostępne</p>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <a class="btn btn-secondary" asp-controller="Home" asp-action="Index">Powrót do listy salonów</a>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const stars = document.querySelectorAll('.star-rating .star');
            stars.forEach(star => {
                star.addEventListener('click', async function () {
                    const rating = this.getAttribute('data-value');
                    const appointmentId = this.closest('.star-rating').getAttribute('data-appointment-id');

                    try {
                        const response = await fetch('/Appointment/RateAppointment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({ AppointmentId: appointmentId, Rating: rating })
                        });

                        if (response.ok) {
                            alert('Ocena została zapisana.');

                            // Aktualizacja wyświetlania gwiazdek po udanym zapisaniu oceny
                            const starContainer = this.closest('.star-rating');
                            const allStars = starContainer.querySelectorAll('.star');

                            allStars.forEach(star => {
                                const starValue = star.getAttribute('data-value');
                                if (starValue <= rating) {
                                    star.classList.add('selected');
                                } else {
                                    star.classList.remove('selected');
                                }
                            });
                        } else {
                            alert('Wystąpił błąd podczas zapisywania oceny.');
                        }
                    } catch (error) {
                        console.error('Błąd:', error);
                        alert('Wystąpił problem z połączeniem.');
                    }
                });
            });
        });

    </script>
}
